### Повышенная сложность:

1. Реализовать ещё одну реализацию для QuestionService, а именно MathQuestionService.

    Данный сервис должен работать по аналогии с JavaQuestionService, но с математическими примерами.

2. Реализовать контроллер MathQuestionController, который позволяет добавлять, удалять и получать список математических вопросов. Для получения конкретной реализации интерфейса QuestionService может потребоваться аннотация @Qualifier.
3. Перенести функцию хранение вопросов из сервисов в отдельные сущности — репозитории. Для этого потребуется реализовать интерфейс QuestionRepository с методами add, remove и getAll. А затем написать две реализации для вопросов по Java и по математике.

    Эти сущности нужно заинжектить в соответствующие сервисы и в сервисах “дергать” репозиторий в случае необходимости добавления, удаления и получения вопросов.

    Допустимо также реализовать @PostConstruct метод init, который заполнит репозиторий данными сразу после его создания Spring.

  4. Доработать ExaminerService на получение случайного набора вопросов не только из JavaQuestionService, но и из MathQuestionService. Включать в запрос вопросы не только по джаве, но и по математике. Количество вопросов по каждой из тем выбирать случайно. Для получения конкретной реализации интерфейса QuestionService может потребоваться аннотация @Qualifier.
  5. Доработать JavaQuestionController, так как вторая реализация QuestionService сломала корректный инжект по интерфейсу. Может потребоваться аннотация @Qualifier.
  6. Покрыть юнит-тестами MathQuestionService (с моком), оба репозитория.
  7. Переработать юнит-тесты для JavaQuestionService с учетом ввода репозитория (добавить мок).
  8. Переработать юнит-тесты для ExaminerServiceImpl с учетом добавления второго сервиса вопросов.